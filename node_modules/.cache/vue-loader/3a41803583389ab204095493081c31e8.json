{"remainingRequest":"/var/www/html/memory-lights-source/node_modules/vue-loader/lib/index.js??vue-loader-options!/var/www/html/memory-lights-source/src/components/GameLights.vue?vue&type=style&index=0&id=d72f77dc&scoped=true&lang=scss&","dependencies":[{"path":"/var/www/html/memory-lights-source/src/components/GameLights.vue","mtime":1584935874768},{"path":"/var/www/html/memory-lights-source/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/var/www/html/memory-lights-source/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/var/www/html/memory-lights-source/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/var/www/html/memory-lights-source/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/var/www/html/memory-lights-source/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/var/www/html/memory-lights-source/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLmdhbWUtbGlnaHRzIHsKICBwb3NpdGlvbjogcmVsYXRpdmU7CiAgbWFyZ2luLWJvdHRvbTogNDBweDsKICAmLndhaXRpbmcgewogICAgcG9pbnRlci1ldmVudHM6IG5vbmU7CiAgfQp9Cg=="},{"version":3,"sources":["GameLights.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+GA;AACA;AACA;AACA;AACA;AACA;AACA","file":"GameLights.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div :class=\"`game-lights ${state}`\">\n      <gl-holder>\n        <gl-button :shortkey=\"'E'\" :color=\"'#FF0000'\" :sound=\"'1.mp3'\"/>\n        <gl-button :shortkey=\"'I'\" :color=\"'#008000'\" :sound=\"'2.mp3'\"/>\n        <gl-button :shortkey=\"'F'\" :color=\"'#0000FF'\" :sound=\"'3.mp3'\"/>\n        <gl-button :shortkey=\"'J'\" :color=\"'#008B8B'\" :sound=\"'4.mp3'\"/>\n      </gl-holder>\n      <game-over v-if=\"state == 'gameover'\"/>\n  </div>\n</template>\n\n<script>\n\nimport GameOver from '@/components/GameLights/GameOver.vue'\nimport GlHolder from '@/components/GameLights/Holder.vue'\nimport GlButton from '@/components/GameLights/Button.vue'\n\nexport default {\n  name: 'GameLights',\n  components: {\n    GlHolder,\n    GlButton,\n    GameOver\n  },\n  computed: {\n    level: {\n      get () {\n        return this.$store.state.level\n      },\n      set (value) {\n        this.$store.state.level = value\n      }\n    },    \n    currentSequence: {\n      get () {\n        return this.$store.state.currentSequence\n      },\n      set (value) {\n        this.$store.state.currentSequence = value\n      }\n    },\n    state: {\n      get () {\n        return this.$store.state.state\n      },\n      set (value) {\n        this.$store.state.state = value\n      }\n    }    \n  },\n  methods: {\n    play (sequence = []) {\n      this.setState('waiting');\n      sequence.forEach((n, i) => {\n        setTimeout(() => {\n          document.querySelectorAll(`[data-light-button]`)[n].click();\n          if (i == sequence.length - 1) {\n            this.setState('listening');\n          } \n        }, 800 * i);\n      });\n    },\n    levelUp () {\n      this.level++;\n      this.currentSequence = [];\n      for (let i=0; i<this.level; i++) {\n        this.currentSequence.push(this.randomNumber(0,3));\n      }\n      this.play(this.currentSequence);\n    },\n    restart () {\n      this.setState('waiting');\n      this.$store.state.started = true;\n      this.$store.state.hits = [];\n      this.$store.state.level = 0;\n      this.$store.state.elapsedTime = 0;\n      this.$store.state.currentSequence = [];\n      this.$store.state.sequenceListener = undefined;  \n      window?.$gamelights_timer?.reset();     \n      setTimeout(() => {\n          window.$gamelights.levelUp();\n      }, 500);      \n    },    \n    gameOver () {\n      this.setState('gameover');\n      this.$store.state.started = false;\n    },\n    randomNumber (min, max) {\n      return Math.floor(Math.random() * (max - min + 1)) + min;\n    },\n    setState (state) {\n      this.$store.state.state = state;\n    },\n    getState () {\n      return this.$store.state.state;\n    },\n    sequence () {\n      return this.currentSequence;\n    },\n    shiftSequence () {\n      return this.currentSequence.shift();\n    }\n  },\n  mounted () {\n    window.$gamelights = this;\n  }\n}\n</script>\n\n<style scoped lang=\"scss\">\n  .game-lights {\n    position: relative;\n    margin-bottom: 40px;\n    &.waiting {\n      pointer-events: none;\n    }\n  }\n</style>\n"]}]}